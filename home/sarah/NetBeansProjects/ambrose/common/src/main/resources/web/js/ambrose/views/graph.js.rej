--- home/sarah/Desktop/tmpz/ambrose/common/src/main/resources/web/js/ambrose/views/graph.js
+++ home/sarah/NetBeansProjects/ambrose/common/src/main/resources/web/js/ambrose/views/graph.js
@@ -147,6 +147,20 @@
       var self = this;
       var xs = this.xs;
       var ys = this.ys;
+      
+ 			// creating tip on node click
+      var vis = d3.select("#ambrose-views-graph")		
+									.append("svg:svg")
+									.attr("id","physical-plan-graph")
+									.style("position", "absolute")
+
+		 	vis.append("svg:rect")					
+				.attr("id","tip")
+				.on('click', function(node) {
+				  	 d3.select("#job-physical-plan").remove();
+ 				  	 d3.select("#physical-plan-graph").attr("visibility","hidden");
+				    });
+				    
       var projection = this.projection;
       g = g.enter().append('svg:g').attr('class', function(node) {
         return node.pseudo ? 'pseudo' : 'node';
@@ -168,8 +182,22 @@
         .attr('cy', function(d) { return ys(d.y); })
         .attr('r', 8)
         .on('mouseover', function(node) { self.workflow.mouseOverJob(node.data); })
-        .on('mouseout', function(node) { self.workflow.mouseOverJob(null); })
-        .on('click', function(node) { self.workflow.selectJob(node.data); });
+        .on('mouseout', function(node) { self.workflow.mouseOverJob(null)
+        })
+        .on('click',function(node){  
+      		//sending request to get physical plan
+        	data = node.data;
+        	url = data['name'];
+        	x  = (event.pageY);
+        	y = (event.pageX);
+        	
+        	d3.select("#job-physical-plan").remove();
+        	d3.json(url + '-subg',function(subg) {
+								drawingPhysicalPlan(x,y,subg);
+									} );	
+		      }
+        );
+        
     },
 
     updateNodeGroups: function(g, duration) {
@@ -192,3 +220,136 @@
   Graph.fn.init.prototype = Graph.fn;
   return Graph;
 });
+
+/** Draw tree with given values*/
+function drawTree(treeData, treeWidth, treeHeight, vis ,linkColor, nodeColor ,delta){    
+	var tree = d3.layout.tree()
+		.size([treeWidth,treeHeight]);
+
+	// preparing nodes 
+	var nodes = tree.nodes(treeData);
+	// Preparing links 
+	var links = tree.links(nodes);
+			
+
+	// Drawing mapper
+	 var diagonal = d3.svg.diagonal()
+			.projection(function(d) { return [treeHeight - d.y + delta , d.x]; });
+		    
+
+	var link = vis.selectAll("pathlink")
+			.data(links)
+			.enter().append("svg:path")
+			.attr("class", "link")
+			.attr("d", diagonal)
+			.style("stroke-width", "5px")
+			.style("stroke", linkColor)
+			.style("fill", "none")
+			.attr("dx",+15)
+			;
+
+	var node = vis.selectAll("g.node")
+			.data(nodes)
+			.enter().append("svg:g")
+			.attr("transform", function(d) { return "translate(" + ((treeHeight- d.y) + delta) + "," + d.x  + ")"; })
+			;
+
+	// Add the dot at every node
+	node.append("svg:circle")
+			.attr("r", 25)
+			.style("stroke",nodeColor)
+			.style("fill","#FFFFFF");
+			
+	//adding title
+	node.append("title")
+			.text(function(d) { return d.name; });
+
+	//placing a substring of name as text
+	node.append("text")
+			.style("text-anchor", "middle")
+			.text(function(d) { return d.name.substring(0, 25/3); })
+			.style("font-size","10px");
+}
+
+/** Drawing mapper and reducer*/
+function drawingPhysicalPlan(x,y,subg){
+
+	var mapperData = subg[0].tree;
+	var mapperLevel = subg[0].level;
+	var reducerData = subg[1].tree;
+	var reducerLevel = subg[1].level;
+
+	//Getting boarder of tree	
+	var w = 50;
+	var h =50;
+	var mapperWidth = mapperLevel*w;
+	var mapperHeight = mapperLevel*h;
+	var reducerWidth = reducerLevel*w;
+	var reducerHeight = reducerLevel*h;
+
+	var maxWidth = mapperWidth > reducerWidth?  mapperWidth :reducerWidth;
+	var maxHeight = mapperHeight > reducerHeight?  mapperHeight :reducerHeight;
+
+	//color for mapper and reducer
+	var mapperLinkColor = "#63B8FF";
+	var reducerLinkColor = "#8470FF";
+	var mapperNodeColor = "#4682B4";
+	var reducerNodeColor = "#483D8B";
+
+	//remove old one
+	d3.select("#physical-plan-graph").select("#job-physical-plan").remove();
+	d3.select("#physical-plan-graph").attr("visibility","hidden");
+	//resizing tip to fit mapper and reducer
+	d3.select("#tip").style("z-index", "50")
+			.attr("width", 2*maxHeight+200)
+			.attr("height", maxWidth)
+			.attr("fill","white")
+			.attr("stroke","gray")
+			.attr("rx",20)
+			.attr("ry",20)
+			.attr("stroke-width",5);
+	
+	//moving tip to node 
+	d3.select("#physical-plan-graph").style("z-index", "50")
+			.style("top", x +"px").style("left", y +"px");
+			
+	//changing tip size according to physical plan size	
+	 var vis= d3.select("#physical-plan-graph")
+	 		.append("svg:g")
+			.attr("id","job-physical-plan")			
+			.attr("dx", +100)
+			.attr("width", 2*maxHeight+ 200)
+			.attr("height", maxWidth)	  
+
+				
+	//drawing mapper
+	drawTree( mapperData, maxWidth, maxHeight, vis ,mapperLinkColor,mapperNodeColor,50);
+	//drawing reducer
+	drawTree( reducerData, maxWidth, maxHeight, vis ,reducerLinkColor,reducerNodeColor,maxHeight+ 150);
+
+	//drawing line between mapper and reducer
+	vis.append("line")
+			.attr("x1", (maxHeight+100))
+			.attr("y1", 0)
+			.attr("x2", (maxHeight+100))
+			.attr("y2", maxWidth)
+			.style("fill","none")
+			.style("stroke","#ccc");
+		
+	//adding text for mapper and reducer
+	vis.append("svg:text")
+			.attr("dy", +20)
+			.attr("dx", +15)
+			.style("font-size","15px")
+			.text("Job Mapper")
+			.style("fill",mapperNodeColor);
+
+	vis.append("svg:text")
+			.attr("dy", +20)
+			.attr("dx", (maxHeight+105))
+			.style("font-size","15px")
+			.text("Job Reducer")
+			.style("fill",reducerNodeColor);
+
+	d3.select("#physical-plan-graph").attr("visibility","visible");
+}
